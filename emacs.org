#+TITLE: Emacs configuration
#+AUTHOR: Mark Blunk
#+EMAIL: mblunk@gmail.com
* Configuring Emacs:
  Giving this Cask and org-mode format for Emacs configuration a
  chance. This template was heavily lifted from [[http://zeekat.nl/articles/making-emacs-work-for-me.html][Making Emacs work for
  me]]. I have removed some parts of it that either I didn't think I would
  need or didn't understand.
* How to use this configuration
** Obtaining the source
   You can find the latest public version of the configuration in
   [[https://github.com/markblunk/dotEmacs][the Github repository]] The meat of it (and the source of this
   document) is the ~emacs.org~ file.
** Installation
   This configuration is intended to be installable from scratch. It
   uses [[https://github.com/cask/cask][Cask]] to specify the package dependencies. [[https://github.com/rdallasgray/pallet][Pallet]] is installed
   to sync actual installed packages with the dependency spec.
** Installation procedure
  - Install GNU Emacs 24 or higher
  - Install Cask from https://github.com/cask/cask. If you are using a
    mac, you can install cask using homebrew.
  - Clone [[https://github.com/markblunk/dotEmacs][the repository]] as ~$HOME/.emacs.d~ (or symlink it to that
    directory).
  - Run ~cask install~ in ~$HOME/.emacs.d~
  - Start Emacs
** Issues with installation
   I had some problems (on a mac) with the package not being able to
   find the cask.el and cask-bootstrap.el file from cask. my eventual
   solution was to symlink those files, found in a subdirectory of
   cask, into ~$HOME/.cask/~
** Adding your own modifications
    Here are some problems I have run into more than once, when
    attempting to modify this configuration file
    1. Every code block look like this:
    #+name: SECTION_NAME
    #+begin_src emacs-lisp
      ;;SOME CODE GOES HERE
    #+end_src
    I find that I am repeatedly forgetting to add the ~#+name:
    SECTION_NAME~ line.
    2. If you add a new section, named say ~NEW_SECTION~, then don't forget
       to add the line ~<<NEW_SECTION>>~ in the Configuration file layout
       code block below.

* Graphics and looks
** Color theme
    Load a default theme. For now using deeper-blue. Would like to try
    using solarized at some point
    #+name: look-and-feel
    #+begin_src emacs-lisp
      (load-theme 'deeper-blue)
    #+end_src
** Font
   Load default font of Inconsolata
   #+name: look-and-feel
   #+begin_src emacs-lisp
     (set-face-attribute 'default nil
                         :family "Inconsolata"
                         :height 180
                         :weight 'normal
                         :width 'normal)
   #+end_src
** Blinking cursor
    Turn the cursor off
    #+name: look-and-feel
    #+begin_src emacs-lisp
      (blink-cursor-mode nil)
    #+end_src
** Reduce clutter
    Remove the toolbar and the  scroll bars. The position will be set
    up to show in the buffer.
    #+name: look-and-feel
    #+begin_src emacs-lisp
      (when (window-system)
       (tool-bar-mode -1)
       (scroll-bar-mode -1))
    #+end_src

    When running emacs in a terminal, remove the menu bar.
    #+name: look-and-feel
    #+begin_src emacs-lisp
      (when (not (window-system))
       (menu-bar-mode -1))
    #+end_src
** Fringe decorations
  [[http://www.emacswiki.org/emacs/TheFringe][ The fringe]] is the vertical region at the right and left of the
    buffer.
   Set up git diffs and buffer position in the fringe.
   #+name: look-and-feel
   #+begin_src emacs-lisp
     (when (window-system)
       (require 'git-gutter-fringe)
       (global-git-gutter-mode +1))
     (setq-default indicate-buffer-boundaries 'left)
     (setq-default indicate-empty-lines +1)
   #+end_src
** Mode line
    Use smart mode line to clean up the modeline display a little.
    #+name: look-and-feel
    #+begin_src emacs-lisp
      (sml/setup)
      (sml/apply-theme 'dark)
      (setq sml/shorten-directory t)
      (setq sml/shorten-modes t)
      (setq column-number-mode t)
    #+end_src
** Scrolling behavior

   Replace default keyboard scrolling with a more smooth alternative

   #+name: look-and-feel
   #+begin_src emacs-lisp
     (setq redisplay-dont-pause t
           scroll-margin 1
           scroll-step 1
           scroll-conservatively 10000
           scroll-preserve-screen-position 1)
   #+end_src

   Scroll in 1-line increments the buffer under the mouse.

   #+name: look-and-feel
   #+begin_src emacs-lisp
     (setq mouse-wheel-follow-mouse 't)
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
   #+end_src

** Buffer names
   Setup uniquify so that non-unique buffer names get the parent path
   included to make them unique.
   #+name: look-and-feel
   #+begin_src emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
   #+end_src
** Window systems and terminals
    Make mouse clicks work in xterm (and iTerm)
    #+name: look-and-feel
    #+begin_src emacs-lisp
      (when (not (window-system))
        (xterm-mouse-mode +1))
    #+end_src
* Start up
  Start with the scratch buffer; no start up screen.
  #+name: startup
  #+begin_src emacs-lisp
    (setq inhibit-startup-screen +1)
  #+end_src
** Multi-term
  #+name: startup
  #+begin_src emacs-lisp
    (require 'multi-term)
    (setq multi-term-program "/bin/bash")
  #+end_src
* Formatting and white-space
  Turn off default indent-mode. Superfluous white-space should be
  shown.
  #+name: formatting
  #+begin_src emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq show-trailing-whitespace 't)
  #+end_src
** Text (non-code) formatting
   Let Emacs do line wrapping
   #+name: formatting
   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
   #+end_src

* Programming
** General programming
   Use prettify-symbols mode for all programming.
   Currentlly this only works for Emacs 24.4.X and higher,
   so add in a version check. There is an external package for earlier
   versions, which I might include in the else portion below later.
   #+name: programming-setup
   #+begin_src emacs-lisp
     (if (and (>= emacs-major-version 24)
       (>= emacs-minor-version 4))
       (global-prettify-symbols-mode +1) ())
   #+end_src
   Syntax highlighting
   #+name: programming-setup
   #+begin_src emacs-lisp
     (global-font-lock-mode t)
   #+end_src
   Show matching parentheses
   #+name: programming-setup
   #+begin_src emacs-lisp
;;     (require 'smartparens)
;;     (smartparens-global-mode t)
     (show-paren-mode 1)
     (setq show-paren-delay 0)
     (defadvice show-paren-function
     (after show-matching-paren-offscreen activate)
      "If the matching paren is offscreen, show the matching line in the
        echo area. Has no effect if the character before point is not of
        the syntax class ')'."
     (interactive)
     (let* ((cb (char-before (point)))
             (matching-text (and cb
                                 (char-equal (char-syntax cb) ?\) )
                                 (blink-matching-open))))
     (when matching-text (message matching-text))))
   #+end_src
** Lisps
   For lisp code, I want ParEdit plus general highlighting etc.
   #+name: programming-setup
   #+begin_src emacs-lisp
     (require 'paredit)
     (require 'rainbow-delimiters)
     (autoload 'enable-paredit-mode "paredit"
         "Turn on pseudo-structural editing of Lisp code."   t)
     (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
     (add-hook 'lisp-mode-hook             'enable-paredit-mode)
     (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
     (add-hook 'scheme-mode-hook           'enable-paredit-mode)
     (add-hook 'emacs-lisp-mode-hook       'rainbow-delimiters-mode)
     (add-hook 'lisp-mode-hook             'rainbow-delimiters-mode)
     (add-hook 'lisp-interaction-mode-hook 'rainbow-delimiters-mode)
     (add-hook 'scheme-mode-hook           'rainbow-delimiters-mode)
   #+end_src
** Emacs Lisp
   #+name: programming-setup
   #+begin_src emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
     (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
     (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
   #+end_src
** CSV
   #+name: programming-setup
   #+begin_src emacs-lisp
     (require 'csv-mode)
     (add-to-list 'auto-mode-alist '("\\.csv" . csv-mode))
     (add-to-list 'auto-mode-alist '("\\.tsv" . csv-mode))
   #+end_src
** Haskell
   #+name: programming-setup
   #+begin_src emacs-lisp
     (require 'haskell-mode)
     (require 'hi2)
     (add-to-list 'auto-mode-alist '("\\.hs" . haskell-mode))
     (autoload 'ghc-init "ghc" nil t)
     (autoload 'ghc-debug "ghc" nil t)
     (add-hook 'haskell-mode-hook (lambda () (ghc-init)))
     (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
     (add-hook 'haskell-mode-hook 'turn-on-hi2)
   #+end_src
** Jade
   For Jade files, use jade-mode
   #+name: programming-setup
   #+begin_src emacs-lisp
     (require 'jade-mode)
     (add-to-list 'auto-mode-alist '("\\.jade$" . jade-mode))
   #+end_src
** Java
   Use Java-mode for java
   #+name: programming-setup
   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.java$'" . java-mode))
   #+end_src
** Javascript
   I use JS2-mode for javascript source.
   #+name: programming-setup
   #+begin_src emacs-lisp
     (require 'js2-mode)
     (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . js2-mode))
   #+end_src
** JSON
   For JSON-formatted files, use the default js-mode.
   #+name: programming-setup
   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.json$" . js-mode))
     (add-to-list 'auto-mode-alist '("\\.jshintrc$" . js-mode))
   #+end_src
** Markdown
   For markdown files, start markdown mode.
   #+name: programming-setup
   #+begin_src emacs-lisp
     (require 'markdown-mode)
     (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
   #+end_src
** TODO Python
   Some Python stuff should go here at some point.
   #+name: programming-setup
   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.py$" . python-mode))
     (require 'flycheck)
     (add-hook 'after-init-hook  'global-flycheck-mode)
     (add-hook 'python-mode-hook
       (lambda ()
         (setq indent-tabs-mode nil)
         (setq tab-width 4)
         (setq python-indent 4)
	 (setq tab-stop-list (number-sequence 4 120 4))))
   #+end_src
   Jedi stuff
   #+name: programming-setup
   #+begin_src emacs-lisp
     (require 'epc)
     (add-hook 'python-mode-hook 'jedi:setup)
     (setq jedi:complete-on-dot t)
   #+end_src
** Scala
   Use scala-mode2 for scala files
   #+name: programming-setup
   #+begin_src emacs-lisp
     (require 'scala-mode2)
     (add-to-list 'auto-mode-alist '("\\.sc$" . scala-mode2))
     (add-to-list 'auto-mode-alist '("\\.sbt" . scala-mode2))
   #+end_src
** SQL
   Load Hive files with sql mode.
   #+name: programming-setup
   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.sql$" . sql-mode))
     (add-to-list 'auto-mode-alist '("\\.hive$" . sql-mode))
     (add-to-list 'auto-mode-alist '("\\.hql$" . sql-mode))
     (eval-after-load "sql"
        '(load-library "sql-indent"))
   #+end_src
   Pretty sql indentation
   #+begin_src emacs-lisp
     (eval-after-load "sql"
        '(load-library "sql-indent"))
   #+end_src
** YAML
   #+name: programming-setup
   #+begin_src emacs-lisp
    (require 'yaml-mode)
    (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
   #+end_src
* TODO Auto Complete
  For now, using company mode
  #+name: auto-complete
  #+begin_src emacs-lisp
    (require 'company)
    (add-hook 'after-init-hook 'global-company-mode)
  #+end_src
* TODO Global key bindings
  Some miminal global key bindings. Consult
  http://www.masteringemacs.org/article/my-emacs-keybindings
  for some more ideas.
  #+name: global-keys
  #+begin_src emacs-lisp
    (global-set-key "\C-cg" 'magit-status)
    (global-set-key "\C-cq" 'delete-indentation)
  #+end_src
* Global navigation
  Set emacs configuration file location, and
  bind that function.
  #+name: global-navigation
  #+begin_src emacs-lisp
    (defun mb-edit-emacs-configuration ()
      "Open emacs configuration file"
      (interactive)
      (find-file "~/.emacs.d/emacs.org"))
    (global-set-key "\C-ce" 'mb-edit-emacs-configuration)
  #+end_src
  enable ido-mode
  #+name: global-navigation
  #+begin_src emacs-lisp
    (setq ido-enable-flex-matching t)
    (ido-mode +1)
    (ido-yes-or-no-mode +1)
  #+end_src
* Backups
  Save all backups to a universal location
  #+name: global-backup
  #+begin_src emacs-lisp
    (setq backup-by-copying t
      backup-directory-alist '(("." . "~/.emacs.d/backup/persave"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
  #+end_src
* Org Mode
** Global keys
   Short key bindings for capturing notes/links and switching to agenda.
   #+name: org-config
   #+begin_src emacs-lisp
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)
   #+end_src
   Org-Agenda needs to be loaded before calling =org-agenda= works.
   #+name: org-config
   #+begin_src emacs-lisp
        (require 'org-agenda)
   #+end_src
** Notes / Tasks / TODOs
   Make custom markers for todo items:
   - TODO :: something that needs to be done at some point. If it
             has a date, it should be done on that day but it may be
             moved.
   - PENDING :: something that's awaiting feedback from someone
                else. If it has a date, it needs followup if there
                hasn't been any feedback at that time.
   - MEETING :: a scheduled meeting and cannot easily be rescheduled.
   - DONE :: done.
   - CANCELED :: can be ignored. May include a note on why it's been
                 cancelled.
   #+name: org-config
   #+begin_src emacs-lisp
     (setq org-todo-keywords
           '((sequence "TODO(t)" "PENDING(p)" "MEETING(m)" "|" "DONE(d)" "CANCELED(c)")))
   #+end_src

   Automatically mark todo items with todo subitems as DONE when all
   subitems are done.
   #+name: org-config
   #+begin_src emacs-lisp
     (defun mb-org-autodone (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
     (add-hook 'org-after-todo-statistics-hook 'mb-org-autodone)
   #+end_src

   File and refile notes to any main header in any file in
   my =org-agenda-files= list.
   #+name: org-config
   #+begin_src emacs-lisp
     (setq org-refile-targets '((nil :level . 1)
                                (org-agenda-files :level . 1)))
   #+end_src
** Org-Babel
*** TODO Fontifying source blocks
    Enable yntax highlighting in src blocks.
    #+name: org-config
    #+begin_src emacs-lisp
      (setq org-src-fontify-natively t)
    #+end_src

    Color highlight for the code blocks. Need better colors
;;    #+name: org-config
;;    #+begin_src emacs-lisp
;;    (defface org-block-begin-line
;;      '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
;;      "Face used for the line delimiting the begin of source blocks.")

;;    (defface org-block-background
;;    '((t (:background "#FFFFEA")))
;;   "Face used for the source block background.")

;;    (defface org-block-end-line
;;    '((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
;;    "Face used for the line delimiting the end of source blocks.")
;;    #+end_src
** Language evaluation support
   Org-Babel needs to be told that evaluation of certain languages is
   allowed. I collect all languages here, then enable all of them at
   the end of the section.
   #+name: org-config :noweb no-export
   #+begin_src emacs-lisp
     (defvar org-babel-evaluated-languages
       '(emacs-lisp)
       "List of languages that may be evaluated in Org documents")
     <<org-config-languages>>
     (org-babel-do-load-languages
      'org-babel-load-languages
      (mapcar (lambda (lang)
                (cons lang t))
              org-babel-evaluated-languages))
   #+end_src
* Other libraries
  Loading ~dired+~ improves ~dired~.
  #+name: libraries
  #+begin_src emacs-lisp
    (require 'dired+)
  #+end_src
* Configuration file layout
  Define the emacs.el file that gets generated by the code in
  this org file.
  #+begin_src emacs-lisp :tangle yes :noweb no-export :exports code
    ;;;; Do not modify this file by hand.  It was automatically generated
    ;;;; from `emacs.org` in the same directory. See that file for more
    ;;;; information.
    <<environment>>
    <<tools>>
    <<customize-config>>
    <<look-and-feel>>
    <<formatting>>
    <<programming-setup>>
    <<auto-complete>>
    <<global-keys>>
    <<global-navigation>>
    <<global-backup>>
    <<org-config>>
    <<libraries>>
    <<startup>>
  #+end_src
* Environment
  OSX doesn't set the environment from the shell init files for
  graphical applications, but I set PATH and a bunch of other stuff
  there. The =exec-path-from-shell= package will take care of
  that.
  #+name: environment
  #+begin_src emacs-lisp
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))
  #+end_src

  External packages may be dropped in the .emacs.d/ext directory.
  #+name: environment
  #+begin_src emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/ext")
  #+end_src
* Options set using the customize interface
  By default, Emacs saves the options you set via the `customize-*`
  functions in the user init file, which is "~/.emacs.d/init.el" in
  this setup. Instead, put it in a separate file, which we create if
  it's not there, by first creating an empty file and then loading the
  needed content.
  #+name: customize-config
  #+begin_src emacs-lisp
    (defconst custom-file (expand-file-name "custom.el" user-emacs-directory))
    (unless (file-exists-p custom-file)
      (shell-command (concat "touch " custom-file)))
    (load custom-file)
  #+end_src
