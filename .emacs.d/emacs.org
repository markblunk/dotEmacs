#+TITLE: Emacs configuration
#+AUTHOR: Mark Blunk
#+EMAIL: mblunk@gmail.com
* Configuring Emacs
  Giving this Cask and org-mode format for Emacs configuration a
  chance. This template was heavily lifted from [[http://zeekat.nl/articles/making-emacs-work-for-me.html][Making Emacs work for
  me]]. I have removed some parts of it that either I didn't think I would
  need or didn't understand.
* How to use this configuration
** Obtaining the source
   You can find the latest public version of the configuration in
   [[https://github.com/markblunk/dotfiles][the Github repository]] The meat of it is here, in the ~emacs.org~ file.
** Installation
   This configuration is intended to be installable from scratch. It
   uses [[https://github.com/cask/cask][Cask]] to specify the package dependencies. [[https://github.com/rdallasgray/pallet][Pallet]] is installed
   to sync actual installed packages with the dependency spec.
** Installation procedure
  - Install GNU Emacs 24 or higher
  - Install Cask from https://github.com/cask/cask. If you are using a
    mac, you can install cask using homebrew.
  - Clone [[https://github.com/markblunk/dotEmacs][the repository]] as ~$HOME/.emacs.d~ (or symlink it to that
    directory).
  - Run ~cask install~ in ~$HOME/.emacs.d~
  - Start Emacs
** Issues with installation
   I had some problems (on a mac) with the package not being able to
   find the cask.el and cask-bootstrap.el file from cask. my eventual
   solution was to symlink those files, found in a subdirectory of
   cask, into ~$HOME/.cask/~
** Spell Checking
   Emacs does not come with a spell checker reloaded. I installed
   Aspell on the Mac by running the following commands:
    #+name: install Aspell
    #+begin_src /bin/bash
      brew install aspell --with-lang-en
    #+end_src
   This auto-magically installed a spellchecker that emacs can use.
** Adding your own modifications
    Here are some problems I have run into more than once when
    attempting to modify this configuration file:
    1. Every code block should be begin with ~#+name: SECTION_NAME~,
       in addition the begin_src and end_src wrapped around the
       code. I find that I am repeatedly forgetting to add the ~#+name:
    SECTION_NAME~ line.
    2. If you add a new section, named say ~NEW_SECTION~, then don't forget
       to add the line ~<<NEW_SECTION>>~ in the Configuration file layout
       code block below.

* Graphics and looks
** Color theme
Load a default theme. This version of solarized doesn't play well
with iTerm2, but not sure how to fix this.
#+name: color-theme
#+begin_src emacs-lisp
  (require 'color-theme-sanityinc-solarized)
  (load-theme 'sanityinc-solarized-dark t)
#+end_src
** Font
Load default font of Inconsolata
#+name: font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
  :family "Monospace"
  :height 140
  :weight 'normal
  :width 'normal)
#+end_src
** Blinking cursor
Turn the cursor off
#+name: cursor
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
#+end_src
** Reduce clutter
Remove the toolbar and the  scroll bars. The position will be set
up to show in the buffer. When running emacs in a terminal, remove the menu bar.
#+name: clutter
#+begin_src emacs-lisp
  (when (window-system)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
  (when (not (window-system))
    (menu-bar-mode -1))
#+end_src
** Fringe decorations
[https://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the
buffer.  Set up git diffs and buffer position in the fringe.
#+name: fringe
#+begin_src emacs-lisp
  (require 'git-gutter)
  (global-git-gutter-mode +1)
  (setq-default indicate-buffer-boundaries 'left)
  (setq-default indicate-empty-lines +1)
#+end_src
** Mode line
Use smart mode line to clean up the modeline display a little.
#+name: mode
#+begin_src emacs-lisp
  (sml/setup)
  (sml/apply-theme 'dark)
  (setq sml/shorten-directory t)
  (setq sml/shorten-modes t)
  (setq column-number-mode t)
#+end_src
** Scrolling behavior
Replace default keyboard scrolling with a more smooth alternative
#+name: scroll
#+begin_src emacs-lisp
  (setq redisplay-dont-pause t
  scroll-margin 1
  scroll-step 1
  scroll-conservatively 10000
  scroll-preserve-screen-position 1)
  (setq mouse-wheel-follow-mouse 't)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
#+end_src
** Buffer names
Setup uniquify so that non-unique buffer names get the parent path
included to make them unique.
#+name: buffer-names
#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+end_src
** Window systems and terminals
Make mouse clicks work in xterm (and iTerm)
#+name: mouse-clicks
#+begin_src emacs-lisp
  (when (not (window-system))
    (xterm-mouse-mode +1))
#+end_src
* Start up
#+name: startup
#+begin_src emacs-lisp
  (require 'projectile)
  (projectile-global-mode)

  (add-to-list 'default-frame-alist '(height . 35))
  (add-to-list 'default-frame-alist '(width . 140))

  (require 'multi-term)
  (setq multi-term-program "/bin/bash")

  (setq inhibit-startup-screen +1)

  (setq-default indent-tabs-mode nil)
  (setq-default show-trailing-whitespace t)

  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src
* Programming
** General programming
Use prettify-symbols mode for all programming.  Currentlly this only
 works for Emacs 24.4.X and higher, so add in a version check. There
 is an external package for earlier versions, which I might include in
 the else portion below later.

Syntax highlighting Show matching parentheses
#+name: programming-setup
#+begin_src emacs-lisp
  (if (and (>= emacs-major-version 24)
	 (>= emacs-minor-version 4))
    (global-prettify-symbols-mode +1) ())
(global-font-lock-mode t)
(require 'smartparens)
(smartparens-global-mode t)
(show-paren-mode 1)
(setq show-paren-delay 0)
(defadvice show-paren-function
    (after show-matching-paren-offscreen activate)
  "If the matching paren is offscreen, show the matching line in the
        echo area. Has no effect if the character before point is not of
        the syntax class ')'."
  (interactive)
  (let* ((cb (char-before (point)))
         (matching-text (and cb
                             (char-equal (char-syntax cb) ?\) )
                             (blink-matching-open))))
    (when matching-text (message matching-text))))
  (require 'flycheck)
  (setq flycheck-check-syntax-automatically '(mode-enabled save))
  (require 'flycheck-color-mode-line)
  (eval-after-load "flycheck"
    '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))

  (require 'rainbow-delimiters)
  (require 'lsp-mode)
  (require 'company)
  (require 'company-lsp)
  (add-hook 'after-init-hook 'global-company-mode)

  (require 'lsp-mode)
;  (require 'lsp-ui)
  (require 'company-lsp)
  (push 'company-lsp company-backends)
;  (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  ; (custom-set-variables '(lsp-auto-guess-root t))

  (require 'yasnippet)
  (yas-global-mode 1)
#+end_src
** C
#+name: c
#+begin_src emacs-lisp
  (add-hook 'c-mode-hook #'flycheck-mode)

  (require 'google-c-style)
  (add-hook 'c-mode-common-hook 'google-set-c-style)
  (add-hook 'c-mode-common-hook 'google-make-newline-indent)
#+end_src
** Cpp
#+name: cpp
#+begin_src emacs-lisp
  (custom-set-variables;
    '(company-clang-executable "/usr/bin/clang-7")
;    '(lsp-prefer-flymake nil) ;; use flycheck in lsp-ui instead
    '(lsp-clients-clangd-executable "clangd-7")
)

  ;; https://github.com/emacs-lsp/lsp-mode#how-it-works
  ;; if you want to force starting a particular language server in a file
  ;; you may use C-u M-x lsp which will prompt you to select language server to start.
  (add-hook 'c++-mode-hook #'flycheck-mode)
  (add-hook 'c++-mode-hook #'lsp)
  (add-hook 'c++-mode-hook  'rainbow-delimiters-mode)

  (require 'clang-format)
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+end_src

To have commands like clang-format-buffer run as expected, place a
.clang-format in your project directory by running the following command

#+begin_src sh
  clang-format-7 -i -style=Google -dump-config > $PROJECT_DIR/.clang-format
#+end_src

** Lisp
For lisp code, I want ParEdit plus general highlighting etc.
#+name: lisp
#+begin_src emacs-lisp
  (require 'paredit)
  (autoload 'enable-paredit-mode "paredit"
      "Turn on pseudo-structural editing of Lisp code."   t)
  (add-hook 'lisp-mode-hook             'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             'rainbow-delimiters-mode)
  (add-hook 'lisp-interaction-mode-hook 'rainbow-delimiters-mode)
#+end_src
** Emacs Lisp
#+name: elisp
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook       'rainbow-delimiters-mode)
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+end_src
** CSV
#+name: csv
#+begin_src emacs-lisp
  (require 'csv-mode)
  (add-to-list 'auto-mode-alist '("\\.csv" . csv-mode))
  (add-to-list 'auto-mode-alist '("\\.tsv" . csv-mode))
#+end_src
** Java
Use Java-mode for java
#+name: java
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.java$'" . java-mode))
#+end_src
** Javascript
Use JS2-mode for javascript source.
#+name: programming-setup
#+begin_src emacs-lisp
  (require 'js2-mode)
  (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . js2-mode))
#+end_src
** JSON
For JSON-formatted files, use the default js-mode.
#+name: json
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.json$" . js-mode))
  (add-to-list 'auto-mode-alist '("\\.jshintrc$" . js-mode))
#+end_src
** Markdown
For markdown files, start markdown mode.
#+name: markdown
#+begin_src emacs-lisp
  (require 'markdown-mode)
  (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
#+end_src
** Python
In order for flycheck to work, install pylint with pip in your
local environment
#+name: python
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.py$" . python-mode))
  (require 'highlight-indentation)
  (add-hook 'python-mode-hook 'highlight-indentation-mode)
  (add-hook 'python-mode-hook
       (lambda ()
         (setq indent-tabs-mode nil)
         (setq tab-width 4)
         (setq python-indent 4)
	 (setq tab-stop-list (number-sequence 4 120 4))
         (set-face-background 'highlight-indentation-face "DarkRed")))
	 ;;jedi stuff
  (require 'virtualenvwrapper)
  (add-hook 'python-mode-hook
    (lambda ()
      (hack-local-variables)
      (when (boundp 'project-venv-name)
      (venv-workon project-venv-name))))
  (require 'epc)
  (require 'jedi)
;  (add-to-list 'ac-sources 'ac-source-jedi-direct)
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:setup-keys t)
  (setq jedi:complete-on-dot t)
#+end_src
** Rust
#+name: rust
#+begin_src emacs-lisp
  (setq exec-path (append exec-path '("~/.cargo/bin")))
  (require 'rust-mode)
  ;; this hook requires stable toolchain
  (add-hook 'rust-mode-hook
    (lambda ()
      (local-set-key (kbd "C-c <tab>") #'rust-format-buffer)))

  (require 'racer)
  (add-hook 'rust-mode-hook #'flycheck-mode)
  ;code completion
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode)
  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  (setq company-tooltip-align-annotations t)
  ; this line could break if we disable global flycheck
  (add-hook 'rust-mode-hook #'flycheck-rust-setup)
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
#+end_src
** Scala
#+name: scala
#+begin_src emacs-lisp
  (require 'ensime)
  (add-hook 'scala-mode-hook #'rainbow-delimiters-mode)
  (add-to-list 'auto-mode-alist '("\\.sc$" . scala-mode))
#+end_src
** SQL
Load Hive files with sql mode.
#+name: sql
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.sql$" . sql-mode))
  (add-to-list 'auto-mode-alist '("\\.hql$" . sql-mode))
  (eval-after-load "sql"
      '(load-library "sql-indent"))
#+end_src
** YAML
#+name: yaml
#+begin_src emacs-lisp
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+end_src
* Global key bindings
Some miminal global key bindings. Consult
  http://www.masteringemacs.org/article/my-emacs-keybindings
  for some more ideas.

#+name: global-keys
#+begin_src emacs-lisp
  (global-set-key "\C-c g" 'magit-status)
  (global-set-key "\C-c q" 'delete-indentation)
#+end_src
* Global navigation
Set emacs configuration file location, and
bind that function.
#+name: global-navigation
#+begin_src emacs-lisp
  (defun mb-edit-emacs-configuration ()
    "Open emacs configuration file"
    (interactive)
    (find-file "~/.emacs.d/emacs.org"))
  (global-set-key "\C-ce" 'mb-edit-emacs-configuration)

  ;  enable ido-mode
  (setq ido-enable-flex-matching t)
  (ido-mode +1)
  (ido-yes-or-no-mode +1)

  (cua-mode t)
  (setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
  (transient-mark-mode 1) ;; No region when it is not highlighted
  (setq cua-keep-region-after-copy t) ;; Standard Windows behaviour
 #+end_src
* Backups
Save all backups to a universal location
#+name: global-backup
#+begin_src emacs-lisp
  (setq backup-by-copying t
    backup-directory-alist '(("." . "~/.emacs.d/backup/persave"))
    delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)
#+end_src
* Org Mode
** Global keys
Short key bindings for capturing notes/links and switching to agenda.
#+name: org-commands
#+begin_src emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)

  (require 'org-agenda)
  (custom-set-variables
  '(org-directory "~/org")
  '(org-agenda-files (list org-directory)))
  (setq org-log-done 'time)
#+end_src
** Notes / Tasks / TODOs
Make custom markers for todo items:
- TODO :: something that needs to be done at some point. If it
          has a date, it should be done on that day but it may be
          moved.
- PENDING :: something that's awaiting feedback from someone
             else. If it has a date, it needs followup if there
             hasn't been any feedback at that time.
- MEETING :: a scheduled meeting and cannot easily be rescheduled.
- DONE :: done.
- CANCELED :: can be ignored. May include a note on why it's been
              cancelled.
#+name: todos
#+begin_src emacs-lisp
     (setq org-default-notes-file "~/org/notes.org")
     (setq org-todo-keywords
           '((sequence "TODO(t)" "PENDING(p)" "MEETING(m)" "|" "DONE(d)" "CANCELED(c)")))

     (defun mb-org-autodone (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
     (add-hook 'org-after-todo-statistics-hook 'mb-org-autodone)
     (setq org-refile-targets '((nil :level . 1)
                                (org-agenda-files :level . 1)))
   #+end_src
** Org-Babel
*** TODO Fontifying source blocks
Enable syntax highlighting in src blocks.
#+name: org-babel-syntax
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src
*** Language evaluation support
Org-Babel needs to be told that evaluation of certain languages is
allowed. I collect all languages here, then enable all of them at
the end of the section.

#+name: org-babel-languages
#+begin_src emacs-lisp
  (setq org-babel-load-languages
        '((emacs-lisp . t)))

  (org-babel-do-load-languages
   'org-babel-load-languages
   org-babel-load-languages)
#+end_src
* Other libraries
Loading neotree instead of ~dired~
#+name: libraries
#+begin_src emacs-lisp
  (require 'neotree)
#+end_src
* Configuration file layout
Define the emacs.el file that gets generated by the code in
this org file.
#+begin_src emacs-lisp :tangle yes :noweb no-export :exports code
  ;;;; package --- Summary
  ;;;; Do not modify this file by hand.  It was automatically generated
  ;;;; from `emacs.org` in the same directory. See that file for more
  ;;;; information.
  <<environment>>
  <<customize-config>>
  <<color-theme>>
  <<font>>
  <<cursor>>
  <<clutter>>
  <<fringe>>
  <<mode>>
  <<scroll>>
  <<buffer-names>>
  <<mouse-clicks>>
  <<programming-setup>>
  <<lisp>>
  <<elisp>>
  <<c>>
  <<cpp>>
  <<csv>>
  <<java>>
  <<javascript>>
  <<json>>
  <<markdown>>
  <<python>>
  <<rust>>
  <<scala>>
  <<sql>>
  <<yaml>>
  <<global-keys>>
  <<global-navigation>>
  <<global-backup>>
  <<org-commands>>
  <<todos>>
  <<org-babel-syntax>>
  <<org-babel-languages>>
  <<libraries>>
  <<startup>>
#+end_src
* Environment
  External packages may be dropped in the .emacs.d/external directory.
  #+name: environment
  #+begin_src emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/external")
  #+end_src
* Options set using the customize interface
  By default, Emacs saves the options you set via the `customize-*`
  functions in the user init file, which is "~/.emacs.d/init.el" in
  this setup. Instead, put it in a separate file, which we create if
  it's not there, by first creating an empty file and then loading the
  needed content.

  #+name: customize-config
  #+begin_src emacs-lisp
    (defconst custom-file (expand-file-name "custom.el" user-emacs-directory))
    (unless (file-exists-p custom-file)
      (shell-command (concat "touch " custom-file)))
    (load custom-file)
  #+end_src
