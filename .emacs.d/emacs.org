#+TITLE: Emacs configuration
#+AUTHOR: Mark Blunk
* Configuring Emacs
  Giving org-mode format for Emacs configuration a chance. This
  template was heavily lifted from [[http://zeekat.nl/articles/making-emacs-work-for-me.html][Making Emacs work for me]]. I have
  removed some parts of it that either I didn't think I would need or
  didn't understand.
* How to use this configuration
** Obtaining the source
   You can find the latest public version of this configuration in [[https://github.com/markblunk/dotfiles][the
   Github repository]] The meat of it is right here in this file.
** Installation
   This configuration is intended to be installable from scratch.
** Spell Checking
   Emacs does not come with a spell checker reloaded. I installed
   Aspell on the Mac by running the following commands:
#+NAME: install Aspell
#+BEGIN_SRC sh
  brew install aspell --with-lang-en
#+END_SRC
   This auto-magically installed a spellchecker that emacs can use.
* Graphics and looks
** Color theme
#+NAME: color-theme
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    (setq solarized-emphasize-indicators nil
          solarized-scale-org-headlines nil)
    (load-theme 'solarized-dark t))
#+END_SRC
** Font
Load default font of Monospace
#+NAME: font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :family "Monospace"
                      :height 140
                      :weight 'normal
                      :width 'normal)

  (global-font-lock-mode t)

  (if (or
       (> emacs-major-version 24)
       (and
        (= emacs-major-version 24)
        (>= emacs-minor-version 4)))
      (global-prettify-symbols-mode +1))

  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

#+END_SRC
** Reduce clutter
#+NAME: clutter
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode nil)
  (show-paren-mode t)

  (defadvice show-paren-function
      (after show-matching-paren-offscreen activate)
    "If the matching paren is offscreen, show the matching line in the echo area.  Has no effect if the character before point is not of the syntax class ')'."
    (interactive)
    (let* ((cb (char-before (point)))
           (matching-text (and cb
                               (char-equal (char-syntax cb) ?\) )
                               (blink-matching-open))))
      (when matching-text (message matching-text))))

  (if (window-system)
      (progn
        (tool-bar-mode -1)
        (scroll-bar-mode -1))
    (menu-bar-mode -1))
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (use-package delight
    :ensure t)

  (use-package abbrev
    :delight abbrev-mode)

  (use-package eldoc
    :delight eldoc-mode
    :hook (racer-mode . eldoc-mode))
#+END_SRC
** Fringe decorations
[[https://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the
buffer.  Set up git diffs and buffer position in the fringe.
#+NAME: fringe
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :delight git-gutter-mode
    :init
    (setq-default indicate-buffer-boundaries 'left
                  indicate-empty-lines +1)
    :config
    (global-git-gutter-mode +1))
#+END_SRC
** Mode line
Use smart mode line to clean up the modeline display a little.
#+NAME: mode
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :config
    (setq
     column-number-mode t
     sml/shorten-directory t
     sml/shorten-modes t
     sml/no-confirm-load-theme t)
    (sml/setup))
#+END_SRC
** Scrolling behavior
Replace default keyboard scrolling with a more smooth alternative
#+NAME: scroll
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 1
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1
        mouse-wheel-follow-mouse 't
        mouse-wheel-scroll-amount '(1 ((shift) . 1)))
#+END_SRC
** Buffer names
Setup uniquify so that non-unique buffer names get the parent path
included to make them unique.
#+NAME: buffer-names
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :config
    (setq uniquify-buffer-name-style 'forward))
#+END_SRC
** Window systems and terminals
Make mouse clicks work in xterm (and iTerm)
#+NAME: mouse-clicks
#+BEGIN_SRC emacs-lisp
  (when (not (window-system))
    (xterm-mouse-mode +1))
#+END_SRC
* Start up
#+NAME: startup
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(height . 35))
  (add-to-list 'default-frame-alist '(width . 140))

  (setq inhibit-startup-screen +1)
  (setq-default indent-tabs-mode nil
                show-trailing-whitespace t
                tab-width 4)

  (add-hook 'text-mode-hook 'turn-on-auto-fill)

  (use-package exec-path-from-shell
    :ensure t
    :config (exec-path-from-shell-initialize))

#+END_SRC
* Programming
** General programming
#+NAME: programming-setup
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :delight '(:eval (concat " " (projectile-project-name)))
    :config
    (projectile-mode t))

  (use-package smartparens
    :delight smartparens-mode
    :ensure t
    :config
    (smartparens-global-mode t))

  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package flycheck
    :ensure flycheck-color-mode-line
    :no-require t
    :delight flycheck-mode
    :hook
    ((c-mode . flycheck-mode)
     (c++-mode . flycheck-mode)
     (java-mode . flycheck-mode)
     (emacs-lisp-mode . flycheck-mode)
     (python-mode . flycheck-mode)
     (rust-mode . flycheck-mode)
     (sh-mode . flycheck-mode)
     (flycheck-mode . flycheck-color-mode-line-mode))
    :custom
    (flycheck-checker-error-threshold 2000)
    (flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc)))

  (use-package lsp-mode
    :ensure t
    :commands lsp
    :hook
    ((c-mode . lsp)
     (c++-mode . lsp)
     (java-mode . lsp)
     (rust-mode . lsp))
    :custom
    (lsp-response-timeout 60)
    (lsp-auto-guess-root t)
    (lsp-file-watch-threshold 100000)
    (lsp-clients-clangd-executable "clangd-9")
    (lsp-before-save-edits nil))

  (use-package company
    :ensure t
    :delight company-mode
    ;; :hook ((racer-mode . company-mode)
    ;;        (emacs-lisp-mode . company-mode))
    :commands global-company-mode
    :hook (after-init . global-company-mode)
    :custom (company-tooltip-align-annotations t))

  (use-package company-lsp
    :ensure t
    :after (lsp-mode company)
    :commands company-lsp
    :config
    (push 'company-lsp company-backends)
    :custom
    (company-clang-executable "/usr/bin/clang-9"))

  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :commands lsp-ui-peek-mode
    :config
    (lsp-ui-peek-mode)
    :custom
    (lsp-ui-doc-enable nil)
    (lsp-prefer-flymake nil)
    (lsp-ui-flycheck-enable t)
    :bind
    ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
    ([remap xref-find-references] .  lsp-ui-peek-find-references))

  (use-package yasnippet
    :ensure t
    :delight yas-minor-mode
    :config (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)

  (use-package highlight-doxygen
    :ensure t
    :config (highlight-doxygen-global-mode 1))

   ;; (setq c-default-style
   ;;       '((java-mode . "k&r")
   ;;         (c-mode . "k&r")
   ;;         (c++-mode . "k&r")
   ;;         (other . "gnu")))
#+END_SRC
** C
Use Google newline, and clang-format for C/C++/Java
#+NAME: c
#+BEGIN_SRC emacs-lisp

  ;; (use-package google-c-style
  ;;   :ensure t
  ;;   :commands  google-make-newline-indent
  ;;   :hook (c-mode-common . google-make-newline-indent))

  (use-package clang-format
    :load-path "/usr/share/emacs/site-lisp/clang-format-9"
    :delight
    :commands clang-format-buffer
    :hook (before-save .
                       (lambda ()
                         (when (member major-mode
                                       '(c-mode c++-mode java-mode))
                           (progn
                             (clang-format-buffer) nil)))))
#+END_SRC
** Cpp
To get ccls to behave correctly I followed the build & install
sections of [[https://github.com/MaskRay/ccls/wiki][this wiki]], and then added a file named [[https://github.com/MaskRay/ccls/wiki/Project-Setup#ccls-file][.ccls]] in the root
directory of every project.
#+NAME: cpp
#+BEGIN_SRC emacs-lisp
  (use-package ccls
    :ensure t
    :hook ((c-mode c++-mode) . (lambda () (require 'ccls) (lsp)))
    :config
    (setq ccls-executable (concat (getenv "HOME") "/code/misc/ccls/Release/ccls")))

  (use-package cwarn
    :delight
    :hook (c++-mode  . cwarn-mode))

  (use-package modern-cpp-font-lock
    :ensure t
    :delight modern-c++-font-lock-mode
    :hook (c++-mode . modern-c++-font-lock-mode))

  (use-package clang-rename
    :load-path "/usr/lib/llvm-9/share/clang"
    :custom (clang-rename-binary "/usr/bin/clang-rename-9"))
#+END_SRC
** Emacs-Lisp
   For emacs-lisp code, use paredit for dealing with parentheses.
#+NAME: elisp
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :delight paredit-mode
    :commands enable-paredit-mode
    :config (autoload 'enable-paredit-mode "paredit"
              "Turn on pseudo-structural editing of Lisp code."   t)
    :hook (emacs-lisp-mode . enable-paredit-mode))
#+END_SRC
** Fstar
[[https://github.com/FStarLang/FStar/blob/master/INSTALL.md#opam-package][Fstar installation instructions]]
#+NAME: fstar
#+BEGIN_SRC emacs-lisp
  (use-package fstar-mode
    :ensure t
    :mode ("\\.fs?\\'" . fstar-mode))
#+END_SRC
** Haskell
Use haskell-mode for [[https://bitbucket.org/aseemr/wysteria/wiki/Home][Wysteria]]
#+NAME: haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :delight
    :mode "\\.wy.*\\'")
#+END_SRC
** Latex
#+NAME: latex
#+BEGIN_SRC emacs-lisp
  (use-package latex-pretty-symbols
    :ensure t)

  (use-package auctex
    :defer t
    :ensure t
    :config (setq TeX-auto-save t
                 TeX-parse-self t)
    (setq-default TeX-master nil))

  (use-package cdlatex
    :ensure t
    :delight cdlatex-mode
    :hook ((LaTeX-mode . cdlatex-mode)
           (org-mode . org-cdlatex-mode)))
#+END_SRC
** PSL
   Add psl-mode, which is symlinked to a local copy hiding elsewhere
#+NAME: psl
#+BEGIN_SRC emacs-lisp
  (use-package psl-mode
    :load-path "external"
    :mode "\\.psl\\'")
#+END_SRC
** Python
#+NAME: python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :config
    (setq python-indent-offset 4
          tab-stop-list (number-sequence 4 120 4)))

  (use-package highlight-indentation
    :ensure t
    :after python
    :hook (python-mode . highlight-indentation-mode)
    :config (set-face-background 'highlight-indentation-face "DarkRed"))
#+END_SRC
** Rust
#+NAME: rust
#+BEGIN_SRC emacs-lisp
  ;; Pre-requisites:
  ;; rustup default nightly
  ;; cargo component add rust-src
  ;; cargo +nightly install racer

  (use-package rust-mode
    :delight rust-mode
    :ensure flycheck-rust
    :no-require t
    :mode "\\.rs\\'"
    :commands flycheck-rust-setup
    :hook (rust-mode . flycheck-rust-setup)
    :config (setq rust-format-on-save t))

  (use-package racer
    :after rust-mode
    :delight racer-mode
    :ensure t
    :hook (rust-mode . racer-mode)
    :config
    (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common))
  (setq racer-rust-src-path (concat
                             (getenv "HOME")
                             "/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"))

  (use-package cargo
    :ensure t
    :delight cargo-minor-mode
    :hook (rust-mode . cargo-minor-mode))
#+END_SRC
** Misc
#+NAME: misc
#+BEGIN_SRC emacs-lisp
  (use-package autoconf
    :delight autoconf-mode)

  (use-package cmake-mode
    :load-path "/usr/share/emacs/site-lisp"
    :delight)

  (use-package csv-mode
    :ensure t)

  (use-package dockerfile-mode
    :ensure t)

  (use-package groovy-mode
    :ensure t)

  (use-package lsp-java
    :ensure t
    :after lsp-mode)

  (use-package lean-mode
    :delight
    :ensure t)

  (use-package company-lean
    :after (lean-mode company)
    :ensure t)

  (use-package js2-mode
    :ensure t
    :mode "\\.js[x]?\\'")

  (use-package json-mode
    :ensure t
    :delight)

  (use-package markdown-mode
    :ensure t
    :delight)

  (use-package proof-general
    :ensure t)

  (use-package scala-mode
    :ensure t)

  (use-package sql-indent
    :ensure t
    :commands sqlind-minor-mode
    :hook (sql-mode . sqlind-minor-mode))

  (use-package tuareg
    :ensure t
    :delight)

  (use-package nxml-mode
    :delight)

  (use-package yaml-mode
    :ensure t)
#+END_SRC
* Global key bindings
Some miminal global key bindings. Consult [[https://www.masteringemacs.org/article/my-emacs-keybindings][Mastering Emacs]] for some
more ideas.
#+NAME: global-keys
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-c q" 'delete-indentation)
#+END_SRC
* Global navigation
Set emacs configuration file location, and
bind that function.
#+NAME: global-navigation
#+BEGIN_SRC emacs-lisp
  (defun mb-edit-emacs-configuration ()
    "Open Emacs configuration file."
    (interactive)
    (find-file (concat (getenv "HOME") "/.emacs.d/emacs.org")))
  (global-set-key "\C-ce" 'mb-edit-emacs-configuration)

  (use-package ido
    :ensure t
    :custom
    (ido-ignore-extensions 1)
    (ido-mode 1)
    (ido-everywhere 1)
    (ido-enable-flex-matching t)
    (ido-file-extensions-order '(".c" ".cpp" ".el" ".java" ".sh" ".ac" ".org" ".tex")))

  (use-package ido-yes-or-no
    :ensure t
    :after ido
    :custom (ido-yes-or-no-mode 1))

  (transient-mark-mode 1) ;; No region when it is not highlighted

#+END_SRC
* Backups
Save all backups to a universal location
#+NAME: global-backup
#+BEGIN_SRC emacs-lisp
    (setq
     backup-by-copying t
     backup-directory-alist '(("." . "~/.emacs.d/backup/persave"))
     ;; this doesn't work for some reason
     ;backup-directory-alist '(("." . (concat (getenv "HOME") "/.emacs.d/backup/persave")))
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)

#+END_SRC
* Org Mode
Short key bindings for capturing notes/links and switching to agenda.
#+NAME: org-commands
#+BEGIN_SRC emacs-lisp
  (use-package org
    :delight
    :ensure org-plus-contrib
    :bind (("\C-cl" . org-store-link)
           ("\C-cc" . org-capture)
           ("\C-ca" . org-agenda))
    :config
    (setq org-directory (concat (getenv "HOME") "/org")
          org-archive-location (concat org-directory "/archive.org::")
          org-default-notes-file (concat org-directory "/notes.org")
          org-agenda-files (list org-directory)
          org-log-done 'time
          org-refile-targets '((nil :level . 1) (org-agenda-files :level . 1))
          org-src-fontify-natively t
          org-todo-keywords '((sequence "TODO(t)" "PENDING(p)" "|" "DONE(d)" "CANCELED(c)")
                              (sequence "WAITING(w)" "|" "DONE(d)" "CANCELED(c)")))
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (shell . t)
                                   (sql . t)
                                   (python . t)
                                   (latex . t)))
    :custom
    (org-export-backends '(ascii beamer html latex md texinfo)))

  (use-package ob-python
    :config
    (setq org-babel-python-command (concat (getenv "HOME") "/.virtualenvs/emacs/bin/python")))

  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode))
#+END_SRC
* Other libraries
Make sure /.class.d/ files are ignored (/.class/ files are already
ignored) in [[info:emacs#Dired][dired-mode]] (the mode of the minibuffer when trying to find
a file with ~\C-x\C-f~).
#+NAME: dired-omit
#+BEGIN_SRC emacs-lisp
  (push ".class.d" completion-ignored-extensions)
  (push ".libs/" completion-ignored-extensions)
  (push ".deps/" completion-ignored-extensions)

  (use-package dired-x
    :config (setq dired-omit-mode t))
#+END_SRC

view manpages inside emacs for greater readability.
#+NAME: man
#+BEGIN_SRC emacs-lisp
  (use-package man-addons
    :load-path "/usr/share/doc/manpages")
#+END_SRC

Use treemacs for exploring projects/workspaces.
#+NAME: treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :config
    ;(setq treemacs-width 20)
    (add-to-list 'treemacs-ignored-file-predicates
                 (lambda (filename absolute-path)
                   "Ignore compiled java class files"
                   (string-match "\\`[a-zA-Z]+\\(\\$[0-9]+\\)?\\.class\\(\\.d\\)?\\'" filename)))
    (add-to-list 'treemacs-ignored-file-predicates
                 (lambda (filename absolute-path)
                   "Ignore compiled autotools files"
                   (or
                    (string-match "\\`[-_A-Za-z0-9]+\\.\\(l\\|s\\)?o\\'" filename)
                    (string-match "\\`\\.\\(dep\\|lib\\)s\\'" filename)
                    (string-match "\\`\\.dirstamp\\'" filename))))
    (add-to-list 'treemacs-ignored-file-predicates
                 (lambda (filename absolute-path)
                   "Ignore random files"
                   (or
                    (string-match "\\`[-_A-Za-z0-9]+\\.cache\\'" filename)
                    (string-match "\\`\\.ccls-cache\\'" filename)))))
#+END_SRC

Use [[https://github.com/rranelli/auto-package-update.el][auto-package-update]] to keep packages up to date.
#+NAME: update-packages
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :ensure t
    :config
    (setq
     auto-package-update-delete-old-versions t
     auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC

#+NAME: which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :delight
    :config (which-key-mode 1))
#+END_SRC
* External
External packages may be dropped in the [[file:./external][external]] directory.
#+NAME: external
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat (getenv "HOME") "/.emacs.d/external"))
#+END_SRC
* Options set using the customize interface
  By default, Emacs saves the options you set via the `customize-*`
  functions in the user init file, which is "$HOME/.emacs.d/init.el" in
  this setup. Instead, put it in a separate file, which we create if
  it's not there, by first creating an empty file and then loading the
  needed content. Of course, almost all of our custom variables are
  set with use-package, but there are a couple left and this way they
  don't clutter up the other files.
#+NAME: customize-config
#+BEGIN_SRC emacs-lisp
  (defconst custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (shell-command (concat "touch " custom-file)))
  (load custom-file)
#+END_SRC
* Configuration file layout
Define the emacs.el file that gets generated by the code in
this org file.
#+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export :exports code
  ;;; dotemacs --- Autogenerated emacs.el via org-babel

  ;;; Commentary:
  ;; Do not modify this file by hand.  It was automatically generated
  ;; from `emacs.org` in the same directory.  See that file for more
  ;; information.

  ;;; Code:
  <<external>>

  <<customize-config>>

  <<update-packages>>

  <<which-key>>

  <<color-theme>>

  <<font>>

  <<clutter>>

  <<fringe>>

  <<mode>>

  <<scroll>>

  <<buffer-names>>

  <<mouse-clicks>>

  <<global-keys>>

  <<global-navigation>>

  <<global-backup>>

  <<programming-setup>>

  <<c>>

  <<cpp>>

  <<elisp>>

  <<fstar>>

  <<haskell>>

  <<latex>>

  <<psl>>

  <<python>>

  <<rust>>

  <<misc>>

  <<org-commands>>

  <<dired-omit>>

  <<man>>

  <<treemacs>>

  <<startup>>
  ;;; emacs.el ends here
#+END_SRC
