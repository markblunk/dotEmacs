#+TITLE: Emacs configuration
#+AUTHOR: Mark Blunk
#+EMAIL: mblunk@gmail.com
* Configuring Emacs
  Giving this Cask and org-mode format for Emacs configuration a
  chance. This template was heavily lifted from [[http://zeekat.nl/articles/making-emacs-work-for-me.html][Making Emacs work for
  me]]. I have removed some parts of it that either I didn't think I would
  need or didn't understand.
* How to use this configuration
** Obtaining the source
   You can find the latest public version of the configuration in
   [[https://github.com/markblunk/dotfiles][the Github repository]] The meat of it is here, in the ~emacs.org~ file.
** Installation
   This configuration is intended to be installable from scratch. It
   uses [[https://github.com/cask/cask][Cask]] to specify the package dependencies. [[https://github.com/rdallasgray/pallet][Pallet]] is installed
   to sync actual installed packages with the dependency spec.
** Installation procedure
  - Install GNU Emacs 24 or higher
  - Install Cask from https://github.com/cask/cask. If you are using a
    mac, you can install cask using homebrew.
  - Clone [[https://github.com/markblunk/dotEmacs][the repository]] as ~$HOME/.emacs.d~ (or symlink it to that
    directory).
  - Run ~cask install~ in ~$HOME/.emacs.d~
  - Start Emacs
** Issues with installation
   I had some problems (on a mac) with the package not being able to
   find the cask.el and cask-bootstrap.el file from cask. my eventual
   solution was to symlink those files, found in a subdirectory of
   cask, into ~$HOME/.cask/~
** Spell Checking
   Emacs does not come with a spell checker reloaded. I installed
   Aspell on the Mac by running the following commands:
#+NAME: install Aspell
#+BEGIN_SRC shell
  brew install aspell --with-lang-en
#+END_SRC
   This auto-magically installed a spellchecker that emacs can use.
** Adding your own modifications
    Here are some problems I have run into more than once when
    attempting to modify this configuration file:
    1. Every code block should be begin with ~#+NAME: SECTION_NAME~,
       in addition the BEGIN_SRC and END_SRC wrapped around the
       code. I find that I am repeatedly forgetting to add the ~#+NAME:
    SECTION_NAME~ line.
    2. If you add a new section, named say ~NEW_SECTION~, then don't forget
       to add the line ~<<NEW_SECTION>>~ in the Configuration file layout
       code block below.
* Graphics and looks
** Color theme
Load a default theme. This version of solarized doesn't play well
with iTerm2, but not sure how to fix this.
#+NAME: color-theme
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-solarized
    :config
    (load-theme 'sanityinc-solarized-dark t))
#+END_SRC
** Font
Load default font of Monospace
#+NAME: font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
		      :family "Monospace"
		      :height 140
		      :weight 'normal
		      :width 'normal)
#+END_SRC
** Blinking cursor
Turn the cursor off
#+NAME: cursor
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC
** Reduce clutter
Remove the toolbar and the  scroll bars. The position will be set
up to show in the buffer. When running emacs in a terminal, remove the menu bar.
#+NAME: clutter
#+BEGIN_SRC emacs-lisp
  (if (window-system)
      (progn
        (tool-bar-mode -1)
        (scroll-bar-mode -1))
    (menu-bar-mode -1))
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Fringe decorations
[[https://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the
buffer.  Set up git diffs and buffer position in the fringe.
#+NAME: fringe
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :init
    (setq-default indicate-buffer-boundaries 'left)
    (setq-default indicate-empty-lines +1)
    :config
    (global-git-gutter-mode +1))
#+END_SRC
** Mode line
Use smart mode line to clean up the modeline display a little.
#+NAME: mode
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :init
    (setq column-number-mode t)
    :config
    (setq sml/shorten-directory t
          sml/shorten-modes t)
    (sml/setup)
    (sml/apply-theme 'dark))

#+END_SRC
** Scrolling behavior
Replace default keyboard scrolling with a more smooth alternative
#+NAME: scroll
#+BEGIN_SRC emacs-lisp
  (setq redisplay-dont-pause t
        scroll-margin 1
        scroll-step 1
        scroll-conservatively 10000
        scroll-preserve-screen-position 1
        mouse-wheel-follow-mouse 't
        mouse-wheel-scroll-amount '(1 ((shift) . 1)))
#+END_SRC
** Buffer names
Setup uniquify so that non-unique buffer names get the parent path
included to make them unique.
#+NAME: buffer-names
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :config
    (setq uniquify-buffer-name-style 'forward))
#+END_SRC
** Window systems and terminals
Make mouse clicks work in xterm (and iTerm)
#+NAME: mouse-clicks
#+BEGIN_SRC emacs-lisp
  (when (not (window-system))
    (xterm-mouse-mode +1))
#+END_SRC
* Start up
#+NAME: startup
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(height . 35))
  (add-to-list 'default-frame-alist '(width . 140))

  (use-package multi-term
    :config
    (setq multi-term-program "/bin/bash"))

  (setq inhibit-startup-screen +1)
  (setq-default indent-tabs-mode nil)
  (setq-default show-trailing-whitespace t)

  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC
* Programming
** General programming
Use prettify-symbols mode for all programming.  Currentlly this only
 works for Emacs 24.4.X and higher, so add in a version check. There
 is an external package for earlier versions, which I might include in
 the else portion below later.

+ use projectile
+ Syntax highlighting
+ Show matching parentheses
+ Rainbow parens
+ completion with company
+ lsp
  + disable document hover because it's too distracting
  + bump the file-watch threshold
#+NAME: programming-setup
#+BEGIN_SRC emacs-lisp
  (if (and (>= emacs-major-version 24)
           (>= emacs-minor-version 4))
      (global-prettify-symbols-mode +1) ())
  (global-font-lock-mode t)

  (show-paren-mode 1)
  (setq show-paren-delay 0)
  (defadvice show-paren-function
      (after show-matching-paren-offscreen activate)
    "If the matching paren is offscreen, show the matching line in the echo area.  Has no effect if the character before point is not of the syntax class ')'."
    (interactive)
    (let* ((cb (char-before (point)))
           (matching-text (and cb
                               (char-equal (char-syntax cb) ?\) )
                               (blink-matching-open))))
      (when matching-text (message matching-text))))

  (use-package projectile
    :config
    (projectile-mode t))

  (use-package smartparens
    :config
    (smartparens-global-mode t))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package flycheck
    :no-require t
    :hook
    ((c-mode . flycheck-mode)
     (c++-mode . flycheck-mode)
     (java-mode . flycheck-mode)
     (python-mode . flycheck-mode)
     (rust-mode . flycheck-mode))

    :custom (flycheck-checker-error-threshold 2000)
    :config
    (use-package flycheck-color-mode-line
      :hook (flycheck-mode . flycheck-color-mode-line-mode)))

  (use-package lsp-mode
    :hook
    ((c-mode . lsp)
     (c++-mode . lsp)
     (java-mode . lsp)
     (rust-mode . lsp))
    :commands lsp
    :custom
    (lsp-response-timout 60)
    (lsp-auto-guess-root t)
    (lsp-file-watch-threshold 100000)
    (lsp-clients-clangd-executable "clangd-7"))

  (use-package company
    :hook (racer-mode . company-mode)
    :custom (company-tooltip-align-annotations t))

  (use-package company-lsp
    :after (lsp-mode company)
    :commands company-lsp
    :config
    (push 'company-lsp company-backends)
    :custom
    (company-clang-executable "/usr/bin/clang-7"))

  (use-package lsp-ui
    :after lsp-mode
    :commands lsp-ui-mode
    :custom
    (lsp-ui-doc-enable nil)
    (lsp-prefer-flymake nil)
    :bind
    ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
    ([remap xref-find-references] .  lsp-ui-peek-find-references))

  (use-package yasnippet
    :config (yas-global-mode 1))
#+END_SRC
** C
setting google style for c and c++, but not for java.
#+NAME: c
#+BEGIN_SRC emacs-lisp
  (use-package google-c-style
    :commands (google-set-c-style google-make-newline-indent)
    :hook (
           (c-mode . google-set-c-style)
           (c++-mode . google-set-c-style)
           (c-mode . google-make-newline-indent)
           (c++-mode . google-make-newline-indent)))
#+END_SRC
** Cpp

To get ccls to behave correctly I followed the build & install
sections of [[https://github.com/MaskRay/ccls/wiki][this wiki]], and then added a file named [[https://github.com/MaskRay/ccls/wiki/Project-Setup#ccls-file][.ccls]] in the root
directory of my project.

#+NAME: cpp
#+BEGIN_SRC emacs-lisp
  (use-package ccls
    :config
    (setq ccls-executable "~/code/misc/ccls/Release/ccls"))
#+END_SRC
** CSV
#+NAME: csv
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode)
#+END_SRC
** Autoconf
#+NAME: autoconf
#+BEGIN_SRC emacs-lisp
  (use-package autoconf-mode
    :mode "\\.m4\\'")
#+END_SRC
** Cmake
#+NAME: cmake
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)
#+END_SRC
** Docker
#+NAME: docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC
** Fstar
[[https://github.com/FStarLang/FStar/blob/master/INSTALL.md#opam-package][Fstar installation instructions]]
#+NAME: fstar
#+BEGIN_SRC emacs-lisp
  (use-package fstar-mode
    :mode ("\\.fs?\\'" . fstar-mode))
#+END_SRC
** Lisp
For lisp code, I want ParEdit plus general highlighting etc.
#+NAME: lisp
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :config (autoload 'enable-paredit-mode "paredit"
              "Turn on pseudo-structural editing of Lisp code."   t)
    :commands enable-paredit-mode
    :hook ((lisp-mode . enable-paredit-mode)
           (lisp-interaction-mode . enable-paredit-mode)))

#+END_SRC
** Emacs Lisp
#+NAME: elisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
;  (add-hook 'emacs-lisp-mode-hook       'rainbow-delimiters-mode)
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC
** Haskell
#+NAME: haskell
Use haskell-mode for [[https://bitbucket.org/aseemr/wysteria/wiki/Home][Wysteria]]
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :mode "\\.wy.*\\'")
#+END_SRC
** Java
enable lsp-java when editing java projects
#+NAME: java
#+BEGIN_SRC emacs-lisp
  (use-package lsp-java
    :after lsp-mode)

#+END_SRC
** Javascript
Use JS2-mode for javascript source.
#+NAME: programming-setup
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode "\\.js[x]?\\'")
#+END_SRC
** JSON
For JSON-formatted files, use the default js-mode.
#+NAME: json
#+BEGIN_SRC emacs-lisp
  (use-package js-mode
    :mode "\\.jshintrc$")
#+END_SRC
** Markdown
#+NAME: markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC
** Python
#+NAME: python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :config
    (setq python-indent-offset 4
          tab-stop-list (number-sequence 4 120 4)))
  (use-package highlight-indentation
    :after python
    :hook (python-mode . highlight-indentation-mode)
    :config (set-face-background 'highlight-indentation-face "DarkRed"))
#+END_SRC
** Rust
#+NAME: rust
#+BEGIN_SRC emacs-lisp
  ;; this hook requires stable toolchain
  (use-package rust-mode
  ;  :bind (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
    :no-require t
    :mode "\\.rs\\'"
    :config
    (use-package flycheck-rust
      :commands flycheck-rust-setup
      :hook (rust-mode . flycheck-rust-setup)))

  (use-package racer
    :hook (rust-mode . racer-mode)
    :init
    (add-hook 'racer-mode-hook #'eldoc-mode))

#+END_SRC
** Scala
#+NAME: scala
#+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :mode "\\.s\\(cala\\|bt\\)$")
#+END_SRC
** SQL
Load Hive files with sql mode.
#+NAME: sql
#+BEGIN_SRC emacs-lisp
  (use-package sql-mode
    :mode "\\.hql$"
    :config
    (load-library "sql-indent"))

#+END_SRC
** YAML
#+NAME: yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC
** PSL
Add psl-mode, which is symlinked to a local copy hiding elsewhere
#+NAME: psl
#+BEGIN_SRC emacs-lisp
  (use-package psl-mode
    :load-path "external/psl-mode.el"
    :mode "\\.psl\\'")
#+END_SRC
* Global key bindings
Some miminal global key bindings. Consult [[https://www.masteringemacs.org/article/my-emacs-keybindings][Mastering Emacs]] for some
more ideas.
#+NAME: global-keys
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("\C-c g" . magit-status))

  (global-set-key "\C-c q" 'delete-indentation)
#+END_SRC
* Global navigation
Set emacs configuration file location, and
bind that function.
#+NAME: global-navigation
#+BEGIN_SRC emacs-lisp
  (defun mb-edit-emacs-configuration ()
    "Open emacs configuration file"
    (interactive)
    (find-file "~/.emacs.d/emacs.org"))
  (global-set-key "\C-ce" 'mb-edit-emacs-configuration)

  ;  enable ido-mode
  (use-package ido
    :config
    (setq ido-enable-flex-matching t)
    (ido-mode t)
    (ido-yes-or-no-mode +1))

  (cua-mode t)
  (setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
  (transient-mark-mode 1) ;; No region when it is not highlighted
  (setq cua-keep-region-after-copy t) ;; Standard Windows behaviour
 #+END_SRC
* Backups
Save all backups to a universal location
#+NAME: global-backup
#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t
	backup-directory-alist '(("." . "~/.emacs.d/backup/persave"))
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)
#+END_SRC
* Org Mode
** Bullets
use [[https://github.com/sabof/org-bullets][org-bullets]]

#+NAME: org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :after org
    :commands org-bullets-mode
    :hook (org-mode . org-bullets-mode))

#+END_SRC
** Global keys
Short key bindings for capturing notes/links and switching to agenda.
#+NAME: org-commands
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)

  (setq org-directory "~/org"
        org-archive-location  "~/org/archive.org::"
        org-log-done 'time)

  (use-package org-agenda
    :after org
    :config (setq org-agenda-files (list org-directory)))
#+END_SRC
** Notes / Tasks / TODOs
Make custom markers for todo items:
- TODO :: something that needs to be done at some point. If it
          has a date, it should be done on that day but it may be
          moved.
- PENDING :: something that's awaiting feedback from someone
             else. If it has a date, it needs followup if there
             hasn't been any feedback at that time.
- DONE :: done.
- CANCELED :: can be ignored. May include a note on why it's been
              cancelled.
#+NAME: todos
#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file "~/org/notes.org")
  (setq org-todo-keywords
        '((sequence "TODO(t)" "PENDING(p)" "|" "DONE(d)" "CANCELED(c)")))
  (setq org-refile-targets '((nil :level . 1)
                             (org-agenda-files :level . 1)))
#+END_SRC
** Org-Babel
Enable syntax highlighting in src blocks.
#+NAME: org-babel-syntax
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)

  (when (boundp 'org-export-backends)
    (custom-set-variables
     '(org-export-backends '(ascii beamer html latex md texinfo))))
#+END_SRC
*** Language evaluation support
Org-Babel needs to be told that evaluation of certain languages is
allowed. I collect all languages here, then enable all of them at
the end of the section.

#+NAME: org-babel-languages
#+BEGIN_SRC emacs-lisp
  (setq org-babel-load-languages
	'((emacs-lisp . t)
	  (shell . t)
	  (sql . t)))

#+END_SRC
* Other libraries
Make sure .class.d files are ignored (.class files are already
ignored) in [[info:emacs#Dired%20Enter][ Dired-mode]], the mode of the minibuffer when trying to
find a file with C-x C-f).
#+NAME: dired
#+BEGIN_SRC emacs-lisp
  (setq completion-ignored-extensions (cons ".class.d" completion-ignored-extensions))
  (use-package dired-x
    :config (setq dired-omit-mode t))

#+END_SRC
Using treemacs instead of ~dired~
#+NAME: treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :init
    (defun treemacs-ignore-example (filename absolute-path)
      (string-match
       "^[a-zA-Z]+\\(\\$[0-9]+\\)?\\.class\\(\\.d\\)?$" filename))
    :config
    (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-example))

#+END_SRC
* Configuration file layout
Define the emacs.el file that gets generated by the code in
this org file.
#+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export :exports code
  ;;;; package --- Summary
  ;;;; Do not modify this file by hand.  It was automatically generated
  ;;;; from `emacs.org` in the same directory. See that file for more
  ;;;; information.
  <<environment>>
  <<customize-config>>
  <<color-theme>>
  <<font>>
  <<cursor>>
  <<clutter>>
  <<fringe>>
  <<mode>>
  <<scroll>>
  <<buffer-names>>
  <<mouse-clicks>>
  <<programming-setup>>
  <<lisp>>
  <<elisp>>
  <<c>>
  <<cpp>>
  <<csv>>
  <<autoconf>>
  <<cmake>>
  <<docker>>
  <<fstar>>
  <<java>>
  <<javascript>>
  <<json>>
  <<markdown>>
  <<ocaml>>
  <<python>>
  <<rust>>
  <<scala>>
  <<sql>>
  <<yaml>>
  <<psl>>
  <<org-bullets>>
  <<global-keys>>
  <<global-navigation>>
  <<global-backup>>
  <<org-commands>>
  <<todos>>
  <<org-babel-syntax>>
  <<org-babel-languages>>
  <<dired>>
  <<treemacs>>
  <<startup>>
#+END_SRC
* Environment
External packages may be dropped in the .emacs.d/external directory.
#+NAME: environment
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/external")
  (require 'use-package)
#+END_SRC
* Options set using the customize interface
  By default, Emacs saves the options you set via the `customize-*`
  functions in the user init file, which is "~/.emacs.d/init.el" in
  this setup. Instead, put it in a separate file, which we create if
  it's not there, by first creating an empty file and then loading the
  needed content.

#+NAME: customize-config
#+BEGIN_SRC emacs-lisp
  (defconst custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (shell-command (concat "touch " custom-file)))
  (load custom-file)
#+END_SRC
